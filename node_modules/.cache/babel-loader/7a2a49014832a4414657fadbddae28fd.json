{"remainingRequest":"/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/node_modules/babel-loader/lib/index.js!/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/src/components/AddDataFS.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/src/components/AddDataFS.vue","mtime":1648927125191},{"path":"/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/babel.config.js","mtime":1648925663561},{"path":"/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/node_modules/cache-loader/dist/cjs.js","mtime":1648927233908},{"path":"/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/node_modules/babel-loader/lib/index.js","mtime":1648927237436},{"path":"/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/node_modules/cache-loader/dist/cjs.js","mtime":1648927233908},{"path":"/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/node_modules/vue-loader-v16/dist/index.js","mtime":1648927237284}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9kaW9oYXJ5YWRpL0Rlc2t0b3AvQlQzMTAzX3Byb2plY3QvQ292aWRUcmF2ZWxUcmFja2VyL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yLmpzIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7CmltcG9ydCBmaXJlYmFzZUFwcCBmcm9tICcuLi9maXJlYmFzZS5qcyc7CmltcG9ydCB7IGdldEZpcmVzdG9yZSB9IGZyb20gImZpcmViYXNlL2ZpcmVzdG9yZSI7CmltcG9ydCB7IGRvYywgc2V0RG9jIH0gZnJvbSAiZmlyZWJhc2UvZmlyZXN0b3JlIjsKdmFyIGRiID0gZ2V0RmlyZXN0b3JlKGZpcmViYXNlQXBwKTsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdBZGREYXRhRlMnLAogIGNvbXBvbmVudHM6IHt9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBBVTogJycsCiAgICAgIENOOiAnJywKICAgICAgSUQ6ICcnLAogICAgICBKUDogJycsCiAgICAgIEtSOiAnJywKICAgICAgTVk6ICcnLAogICAgICBVUzogJycKICAgIH07CiAgfSwKICBtZXRob2RzOiB7CiAgICBmZXRjaENvdmlkQ2FzZTogZnVuY3Rpb24gZmV0Y2hDb3ZpZENhc2UoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHZhciBlbmRkYXRlT2JqLCBzdGFydGRhdGVPYmosIGVuZGRhdGUsIHN0YXJ0ZGF0ZTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiV29ya2luZyIpOwogICAgICAgICAgICAgICAgZW5kZGF0ZU9iaiA9IG5ldyBEYXRlKCk7CiAgICAgICAgICAgICAgICBzdGFydGRhdGVPYmogPSBuZXcgRGF0ZShuZXcgRGF0ZSgpLnNldERhdGUoZW5kZGF0ZU9iai5nZXREYXRlKCkgLSAzMCkpOwogICAgICAgICAgICAgICAgZW5kZGF0ZSA9IGVuZGRhdGVPYmoudG9JU09TdHJpbmcoKTsKICAgICAgICAgICAgICAgIHN0YXJ0ZGF0ZSA9IHN0YXJ0ZGF0ZU9iai50b0lTT1N0cmluZygpOwogICAgICAgICAgICAgICAgZW5kZGF0ZSA9IGVuZGRhdGUuc3Vic3RyaW5nKDAsIGVuZGRhdGUuaW5kZXhPZignVCcpICsgMSk7CiAgICAgICAgICAgICAgICBzdGFydGRhdGUgPSBzdGFydGRhdGUuc3Vic3RyaW5nKDAsIHN0YXJ0ZGF0ZS5pbmRleE9mKCdUJykgKyAxKTsKICAgICAgICAgICAgICAgIGVuZGRhdGUgKz0gIjAwOjAwOjAwWiI7CiAgICAgICAgICAgICAgICBzdGFydGRhdGUgKz0gIjAwOjAwOjAwWiI7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhzdGFydGRhdGUsIGVuZGRhdGUpOwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEyOwogICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLmdldCgnaHR0cHM6Ly9hcGkuY292aWQxOWFwaS5jb20vdG90YWwvY291bnRyeS8nICsgJ0FVJyArICcvc3RhdHVzL2NvbmZpcm1lZD9mcm9tPScgKyBzdGFydGRhdGUgKyAnJnRvPScgKyBlbmRkYXRlKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuQVUgPSByZXNwb25zZTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgICAgX3RoaXMuQVUuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBzZXREb2MoZG9jKGRiLCAiQXVzdHJhbGlhIiwgZGF0YVsiRGF0ZSJdKSwgewogICAgICAgICAgICAgICAgICAgIENvdW50cnk6ICJBdXN0cmFsaWEiLAogICAgICAgICAgICAgICAgICAgIGRhdGU6IGRhdGFbIkRhdGUiXSwKICAgICAgICAgICAgICAgICAgICBDYXNlczogZGF0YVsiQ2FzZXMiXQogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNTsKICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQoJ2h0dHBzOi8vYXBpLmNvdmlkMTlhcGkuY29tL3RvdGFsL2NvdW50cnkvJyArICdDTicgKyAnL3N0YXR1cy9jb25maXJtZWQ/ZnJvbT0nICsgc3RhcnRkYXRlICsgJyZ0bz0nICsgZW5kZGF0ZSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLkNOID0gcmVzcG9uc2U7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAxNToKICAgICAgICAgICAgICAgIF90aGlzLkNOLmRhdGEuZm9yRWFjaChmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gc2V0RG9jKGRvYyhkYiwgIkNoaW5hIiwgZGF0YVsiRGF0ZSJdKSwgewogICAgICAgICAgICAgICAgICAgIENvdW50cnk6ICJDaGluYSIsCiAgICAgICAgICAgICAgICAgICAgZGF0ZTogZGF0YVsiRGF0ZSJdLAogICAgICAgICAgICAgICAgICAgIENhc2VzOiBkYXRhWyJDYXNlcyJdCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE4OwogICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLmdldCgnaHR0cHM6Ly9hcGkuY292aWQxOWFwaS5jb20vdG90YWwvY291bnRyeS8nICsgJ0lEJyArICcvc3RhdHVzL2NvbmZpcm1lZD9mcm9tPScgKyBzdGFydGRhdGUgKyAnJnRvPScgKyBlbmRkYXRlKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuSUQgPSByZXNwb25zZTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDE4OgogICAgICAgICAgICAgICAgX3RoaXMuSUQuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBzZXREb2MoZG9jKGRiLCAiSW5kb25lc2lhIiwgZGF0YVsiRGF0ZSJdKSwgewogICAgICAgICAgICAgICAgICAgIENvdW50cnk6ICJJbmRvbmVzaWEiLAogICAgICAgICAgICAgICAgICAgIGRhdGU6IGRhdGFbIkRhdGUiXSwKICAgICAgICAgICAgICAgICAgICBDYXNlczogZGF0YVsiQ2FzZXMiXQogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyMTsKICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQoJ2h0dHBzOi8vYXBpLmNvdmlkMTlhcGkuY29tL3RvdGFsL2NvdW50cnkvJyArICdKUCcgKyAnL3N0YXR1cy9jb25maXJtZWQ/ZnJvbT0nICsgc3RhcnRkYXRlICsgJyZ0bz0nICsgZW5kZGF0ZSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLkpQID0gcmVzcG9uc2U7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAyMToKICAgICAgICAgICAgICAgIF90aGlzLkpQLmRhdGEuZm9yRWFjaChmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gc2V0RG9jKGRvYyhkYiwgIkphcGFuIiwgZGF0YVsiRGF0ZSJdKSwgewogICAgICAgICAgICAgICAgICAgIENvdW50cnk6ICJKYXBhbiIsCiAgICAgICAgICAgICAgICAgICAgZGF0ZTogZGF0YVsiRGF0ZSJdLAogICAgICAgICAgICAgICAgICAgIENhc2VzOiBkYXRhWyJDYXNlcyJdCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI0OwogICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLmdldCgnaHR0cHM6Ly9hcGkuY292aWQxOWFwaS5jb20vdG90YWwvY291bnRyeS8nICsgJ0tSJyArICcvc3RhdHVzL2NvbmZpcm1lZD9mcm9tPScgKyBzdGFydGRhdGUgKyAnJnRvPScgKyBlbmRkYXRlKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuS1IgPSByZXNwb25zZTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDI0OgogICAgICAgICAgICAgICAgX3RoaXMuS1IuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBzZXREb2MoZG9jKGRiLCAiU291dGggS29yZWEiLCBkYXRhWyJEYXRlIl0pLCB7CiAgICAgICAgICAgICAgICAgICAgQ291bnRyeTogIlNvdXRoIEtvcmVhIiwKICAgICAgICAgICAgICAgICAgICBkYXRlOiBkYXRhWyJEYXRlIl0sCiAgICAgICAgICAgICAgICAgICAgQ2FzZXM6IGRhdGFbIkNhc2VzIl0KICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjc7CiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MuZ2V0KCdodHRwczovL2FwaS5jb3ZpZDE5YXBpLmNvbS90b3RhbC9jb3VudHJ5LycgKyAnTVknICsgJy9zdGF0dXMvY29uZmlybWVkP2Zyb209JyArIHN0YXJ0ZGF0ZSArICcmdG89JyArIGVuZGRhdGUpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5NWSA9IHJlc3BvbnNlOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMjc6CiAgICAgICAgICAgICAgICBfdGhpcy5NWS5kYXRhLmZvckVhY2goZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHNldERvYyhkb2MoZGIsICJNYWxheXNpYSIsIGRhdGFbIkRhdGUiXSksIHsKICAgICAgICAgICAgICAgICAgICBDb3VudHJ5OiAiTWFsYXlzaWEiLAogICAgICAgICAgICAgICAgICAgIGRhdGU6IGRhdGFbIkRhdGUiXSwKICAgICAgICAgICAgICAgICAgICBDYXNlczogZGF0YVsiQ2FzZXMiXQogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzMDsKICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQoJ2h0dHBzOi8vYXBpLmNvdmlkMTlhcGkuY29tL3RvdGFsL2NvdW50cnkvJyArICdVUycgKyAnL3N0YXR1cy9jb25maXJtZWQ/ZnJvbT0nICsgc3RhcnRkYXRlICsgJyZ0bz0nICsgZW5kZGF0ZSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLlVTID0gcmVzcG9uc2U7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAzMDoKICAgICAgICAgICAgICAgIF90aGlzLlVTLmRhdGEuZm9yRWFjaChmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gc2V0RG9jKGRvYyhkYiwgIlVTQSIsIGRhdGFbIkRhdGUiXSksIHsKICAgICAgICAgICAgICAgICAgICBDb3VudHJ5OiAiVVNBIiwKICAgICAgICAgICAgICAgICAgICBkYXRlOiBkYXRhWyJEYXRlIl0sCiAgICAgICAgICAgICAgICAgICAgQ2FzZXM6IGRhdGFbIkNhc2VzIl0KICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAzMToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUpOwogICAgICB9KSkoKTsKICAgIH0KICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICBjb25zb2xlLmxvZyh0aGlzLkFVKTsKICB9Cn07"},{"version":3,"mappings":"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","names":["axios","firebaseApp","getFirestore","doc","setDoc","db","name","components","data","AU","CN","ID","JP","KR","MY","US","methods","fetchCovidCase","console","log","enddateObj","Date","startdateObj","setDate","getDate","enddate","toISOString","startdate","substring","indexOf","get","then","response","forEach","Country","date","Cases","mounted"],"sourceRoot":"","sources":["/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/src/components/AddDataFS.vue"],"sourcesContent":["<template>\n    <button @click=\"fetchCovidCase()\">test</button>\n</template>\n<script>\nimport axios from 'axios'\nimport firebaseApp from '../firebase.js';\nimport {getFirestore} from \"firebase/firestore\";\nimport {doc, setDoc} from \"firebase/firestore\";\nconst db = getFirestore(firebaseApp);\n\n\nexport default {\n    name : 'AddDataFS',\n    components : {},\n    data() {\n        return  {\n            AU : '',\n            CN : '',\n            ID : '',\n            JP : '',\n            KR : '',\n            MY : '',\n            US : '',\n        }\n    },\n    methods : {\n        async  fetchCovidCase() {\n            console.log(\"Working\")\n            var enddateObj = new Date()\n            var startdateObj = new Date(new Date().setDate(enddateObj.getDate()-30));\n            var enddate = enddateObj.toISOString();\n            var startdate = startdateObj.toISOString();\n            enddate = enddate.substring(0, enddate.indexOf('T')+1);\n            startdate = startdate.substring(0, startdate.indexOf('T')+1);\n            enddate += \"00:00:00Z\"\n            startdate += \"00:00:00Z\"\n            console.log(startdate, enddate)\n            await axios.get('https://api.covid19api.com/total/country/' + 'AU' + '/status/confirmed?from=' + startdate + '&to=' + enddate).then(response => (this.AU = response))\n            this.AU.data.forEach(data => setDoc(doc(db, \"Australia\", data[\"Date\"]), {\n                Country: \"Australia\", date: data[\"Date\"], Cases: data[\"Cases\"]\n            }))\n            await axios.get('https://api.covid19api.com/total/country/' + 'CN' + '/status/confirmed?from=' + startdate + '&to=' + enddate).then(response => (this.CN = response))\n            this.CN.data.forEach(data => setDoc(doc(db, \"China\", data[\"Date\"]), {\n                Country: \"China\", date: data[\"Date\"], Cases: data[\"Cases\"]\n            }))\n            await axios.get('https://api.covid19api.com/total/country/' + 'ID' + '/status/confirmed?from=' + startdate + '&to=' + enddate).then(response => (this.ID = response))\n            this.ID.data.forEach(data => setDoc(doc(db, \"Indonesia\", data[\"Date\"]), {\n                Country: \"Indonesia\", date: data[\"Date\"], Cases: data[\"Cases\"]\n            }))            \n            await axios.get('https://api.covid19api.com/total/country/' + 'JP' + '/status/confirmed?from=' + startdate + '&to=' + enddate).then(response => (this.JP = response))\n            this.JP.data.forEach(data => setDoc(doc(db, \"Japan\", data[\"Date\"]), {\n                Country: \"Japan\", date: data[\"Date\"], Cases: data[\"Cases\"]\n            }))            \n            await axios.get('https://api.covid19api.com/total/country/' + 'KR' + '/status/confirmed?from=' + startdate + '&to=' + enddate).then(response => (this.KR = response))\n            this.KR.data.forEach(data => setDoc(doc(db, \"South Korea\", data[\"Date\"]), {\n                Country: \"South Korea\", date: data[\"Date\"], Cases: data[\"Cases\"]\n            }))            \n            await axios.get('https://api.covid19api.com/total/country/' + 'MY' + '/status/confirmed?from=' + startdate + '&to=' + enddate).then(response => (this.MY = response))\n            this.MY.data.forEach(data => setDoc(doc(db, \"Malaysia\", data[\"Date\"]), {\n                Country: \"Malaysia\", date: data[\"Date\"], Cases: data[\"Cases\"]\n            }))            \n            await axios.get('https://api.covid19api.com/total/country/' + 'US' + '/status/confirmed?from=' + startdate + '&to=' + enddate).then(response => (this.US = response))\n            this.US.data.forEach(data => setDoc(doc(db, \"USA\", data[\"Date\"]), {\n                Country: \"USA\", date: data[\"Date\"], Cases: data[\"Cases\"]\n            }))\n        }\n    },\n    mounted() {\n        console.log(this.AU)\n    },\n}\n</script>\n"]}]}